#include "ns3/vlc-channel-model.h"
#include "ns3/log.h"
#include "ns3/simulator.h"
#include <fstream>

namespace ns3 {

NS_LOG_COMPONENT_DEFINE ("VlcChannel");

NS_OBJECT_ENSURE_REGISTERED (VlcChannel);

ns3::TypeId VlcChannel::GetTypeId(void)	// returns meta-information about VlcErrorModel class
		{ 	// including parent class, group name, constructor, and attributes
	static ns3::TypeId tid =
			ns3::TypeId("VlcChannel").SetParent<ns3::Channel>().AddConstructor<
					VlcChannel>().AddAttribute("AveragePower", "Average Power",
					DoubleValue(0), MakeDoubleAccessor(&VlcChannel::m_AvgPower),
					MakeDoubleChecker<double>());
	return tid;
}

VlcChannel::VlcChannel() :
		m_distanceBWTXandRX(0) {
	//NS_LOG_FUNCTION(this);
	m_loss = CreateObject<VlcPropagationLossModel>();
	m_AvgPower = 0;

	m_SNR = CreateObject<VlcSnr>();
	m_nDevices = 0;
}

void ns3::VlcChannel::Attach(Ptr<VlcNetDevice> device) {
	m_link[m_nDevices++].m_src = device;
	if (m_nDevices == 2) {
		m_link[0].m_dst = m_link[1].m_src;
		m_link[1].m_dst = m_link[0].m_src;
	}
}

uint32_t VlcChannel::GetNDevices(void) const {
	return 2;
}

Ptr<NetDevice> VlcChannel::GetDevice(uint32_t i) const {
	return m_link[i].m_src;
}

void VlcChannel::SetPropagationLossModel(
		ns3::Ptr<ns3::PropagationLossModel> loss) {
	//NS_LOG_FUNCTION(this<<loss);
	this->m_loss = loss;
}

ns3::Ptr<ns3::PropagationLossModel> VlcChannel::GetPropagationLossModel() {
	//NS_LOG_FUNCTION(this);
	return this->m_loss;
}

void VlcChannel::SetPropagationDelayModel(
		ns3::Ptr<ns3::PropagationDelayModel> delay) {
	//NS_LOG_FUNCTION(this<<delay);
	this->m_delay = delay;
}
ns3::Ptr<ns3::PropagationDelayModel> VlcChannel::GetPropagationDelayModel() {
	//NS_LOG_FUNCTION(this);
	return this->m_delay;
}

double VlcChannel::GetDistance() {
	//NS_LOG_FUNCTION(this);
	return this->m_distanceBWTXandRX;
}

void VlcChannel::SetDistance() {
	//NS_LOG_FUNCTION(this);
	ns3::Ptr < VlcNetDevice > first = ns3::DynamicCast < VlcNetDevice
			> (this->GetDevice(0));
	ns3::Ptr < VlcNetDevice > second = ns3::DynamicCast < VlcNetDevice
			> (this->GetDevice(1));

	ns3::Ptr < VlcPropagationLossModel > l = ns3::DynamicCast
			< VlcPropagationLossModel > (this->m_loss);
	this->m_distanceBWTXandRX = l->GetDistance(first->GetMobilityModel(),
			second->GetMobilityModel());
}

void VlcChannel::DoCalcPropagationLoss() {
	//NS_LOG_FUNCTION(this);
	ns3::Ptr < VlcTxNetDevice > first = ns3::DynamicCast < VlcTxNetDevice
			> (this->GetDevice(0));
	ns3::Ptr < VlcRxNetDevice > second = ns3::DynamicCast < VlcRxNetDevice
			> (this->GetDevice(1));
	double loss = 0;

	for (unsigned int i = 0; i < first->GetTXOpticalPowerSignal().size(); i++) {
		loss = m_loss->CalcRxPower(first->GetTXOpticalPowerSignal().at(i),
				first->GetMobilityModel(), second->GetMobilityModel());
		second->GetRXOpticalPowerSignal().at(i) = loss;
	}

}

void VlcChannel::SetPropagationDelay(double delay) {
	//NS_LOG_FUNCTION(this<<delay);
	//this->m_delay->set
}

double VlcChannel::DoCalcPropagationLossForSignal(int timeInstant) {
	//NS_LOG_FUNCTION(this);
	ns3::Ptr < VlcTxNetDevice > first = ns3::DynamicCast < VlcTxNetDevice
			> (this->GetDevice(0));
	ns3::Ptr < VlcRxNetDevice > second = ns3::DynamicCast < VlcRxNetDevice
			> (this->GetDevice(1));
	double loss = m_loss->CalcRxPower(
			first->GetTXOpticalPowerSignal().at(timeInstant),
			first->GetMobilityModel(), second->GetMobilityModel());

	//std::cout <<"power value is :"<< loss<<std::endl;
	m_SNR->SetReceivedPower(loss);

	return loss;
}

double VlcChannel::GetDistance(ns3::Ptr<ns3::MobilityModel> aTX,
		ns3::Ptr<ns3::MobilityModel> bRX) const {
	double dist = 0;
	Vector tx = aTX->GetPosition();
	Vector rx = bRX->GetPosition();
	dist = std::pow((tx.x - rx.x), 2) + std::pow((tx.y - rx.y), 2)
			+ std::pow((tx.z - rx.z), 2);
	dist = std::sqrt(dist);
	return dist;
}

void VlcChannel::SetWavelength(int lower, int upper) {// sets upper and lower bound wavelength [nm]
	//NS_LOG_FUNCTION(this);
	this->m_SNR->SetWavelength(lower, upper);
}

void VlcChannel::SetTemperature(double t) {	// sets the blackbody temperature of LED
	//NS_LOG_FUNCTION(this<<t);
	this->m_SNR->SetTemperature(t);
}

double VlcChannel::GetTemperature() {
	return this->m_SNR->GetTemperature();
}

void VlcChannel::SetReceivedPower(double p) {// sets the average received optical signal power
	//NS_LOG_FUNCTION(this<<p);
	this->m_SNR->SetReceivedPower(p);
}

void VlcChannel::CalculateNoiseVar() {	//calculates the noise variance
	//NS_LOG_FUNCTION(this<<A<<B<<Tk );
	ns3::Ptr < VlcRxNetDevice > rx = DynamicCast < VlcRxNetDevice
			> (this->GetDevice(1));
	this->m_SNR->CalculateNoiseVar(rx->GetPhotoDetectorArea());

}
void VlcChannel::CalculateSNR() {		// caluclates the SNR value
	//NS_LOG_FUNCTION(this);
	this->m_SNR->CalculateSNR();
}

double VlcChannel::GetSNR() const {	// returns the signal-to-noise ratio (SNR)
	//NS_LOG_FUNCTION(this);
	ns3::Ptr < VlcRxNetDevice > rx = DynamicCast < VlcRxNetDevice
			> (this->GetDevice(1));
	this->m_SNR->CalculateNoiseVar(rx->GetPhotoDetectorArea());
	m_SNR->CalculateSNR();
	return this->m_SNR->GetSNR();
}

void VlcChannel::SetAveragePower(double power) {
	//NS_LOG_FUNCTION(this<<power);
	m_AvgPower = power;
}

double VlcChannel::GetAveragePower() {
	//NS_LOG_FUNCTION(this);
	return m_AvgPower;
}

void VlcChannel::SetElectricNoiseBandWidth(double b) {// sets the noise bandwidth
	this->m_SNR->SetElectricNoiseBandWidth(b);
}

double VlcChannel::GetNoiseBandwidth() {			//return the noise bandwidth
	return m_SNR->GetNoiseBandwidth();
}

bool VlcChannel::TransmitStart(Ptr<Packet> p, Ptr<VlcNetDevice> src,
		Time txTime) {

	static int i = 0;
	this->DoCalcPropagationLossForSignal(0);
	this->CalculateNoiseVar();
	double snr = this->GetSNR();

	ns3::Ptr < VlcRxNetDevice > rx = DynamicCast < VlcRxNetDevice
			> (this->GetDevice(1));
	ns3::Ptr < VlcTxNetDevice > tx = DynamicCast < VlcTxNetDevice
			> (this->GetDevice(0));

	double distance = this->GetDistance(tx->GetMobilityModel(),
			rx->GetMobilityModel());
	ns3::Ptr < ns3::VlcErrorModel > rxErrorModel = rx->GetErrorModel();
	double erRate = rxErrorModel->ComputeBER(snr);

	std::ofstream snrVals;
	std::ofstream biterrorRate;
	biterrorRate.open("BitErrorRate.txt", std::ios_base::app);
	snrVals.open("snrValsFile.txt", std::ios_base::app);
	std::ofstream goodput;
	goodput.open("goodput.txt", std::ios_base::app);

	if (i == 0) {
		goodput << distance << "\t" << 300000 * erRate / 2.4579 << std::endl;
		snrVals << snr << "\t" << distance << std::endl;
		biterrorRate << distance << "\t" << erRate << std::endl;
		double eR = 1 - erRate / 5.541;
		double pR = 1 - eR;
		pR = std::pow(pR, 1472 * 8);
		pR = 1 - pR;
	}

	biterrorRate.close();
	goodput.close();
	snrVals.close();
	i++;

	if (i == 3)
		i = 0;

	uint32_t id = src == m_link[0].m_src ? 0 : 1;

	m_delay = CreateObject<ConstantSpeedPropagationDelayModel>();

	Time m_delayTime = m_delay->GetDelay(tx->GetMobilityModel(),
			rx->GetMobilityModel());

	Simulator::ScheduleWithContext(m_link[id].m_dst->GetNode()->GetId(),
			txTime + m_delayTime, &VlcNetDevice::Receive, m_link[id].m_dst, p);

	// Call the tx anim callback on the net device
	m_txrxVlcChannel(p, src, m_link[id].m_dst, txTime, txTime + m_delayTime);

	return true;
}

void VlcChannel::TransmitDataPacket(Ptr<Packet> p) {

	//this is the point where we decide to keep the packet or corrupt it
	this->DoCalcPropagationLossForSignal(0);
	this->CalculateNoiseVar();
	double snr = this->GetSNR();
	ns3::Ptr < VlcRxNetDevice > rx = DynamicCast < VlcRxNetDevice
			> (this->GetDevice(1));
	ns3::Ptr < VlcTxNetDevice > tx = DynamicCast < VlcTxNetDevice
			> (this->GetDevice(0));
	double distance = this->GetDistance(tx->GetMobilityModel(),
			rx->GetMobilityModel());
	ns3::Ptr < ns3::VlcErrorModel > rxErrorModel = rx->GetErrorModel();
	double erRate = rxErrorModel->ComputeBER(snr);
	int size = p->GetSize();
	double packetErrorRate = 1.0 - std::pow((1 - erRate), size);

	std::ofstream pers;
	pers.open("packetErrorRateFile.txt", std::ios_base::app);
	pers << distance << "\t" << packetErrorRate << std::endl;
	//std::cout << distance << "\t" << packetErrorRate << std::endl;
	bool isCorrupt = rxErrorModel->CorruptPacket(p, erRate);
	rx->EnqueueDataPacketAfterCorruption(p, isCorrupt);
	pers.close();

	TransmitStart(p, tx, Seconds(0.1)); //ask them which class does it call and how does it enques packets in the vlc rx class
}

VlcChannel::~VlcChannel() {

}

} /* namespace vlc */
